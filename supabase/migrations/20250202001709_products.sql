create table products (
    id bigint primary key generated by default as identity,
    name text not null,
    description text,
    price numeric not null,
    quantity integer not null default 0,
    is_preorder boolean not null default false,
    is_notify boolean not null default false,
    sizes text[], -- Array of text for sizes
    price_id text, -- For payment processor reference
    created_at timestamptz default now()
);

-- Create indexes for better query performance
create index products_created_at_idx on products(created_at);
create index products_price_idx on products(price);

-- Enable RLS on products table
alter table products enable row level security;

-- Create policies for products table
create policy "Allow public read access to products"
    on products for select
    to public
    using (true);

create policy "Allow authenticated users to modify products"
    on products for all
    to authenticated
    using (true)
    with check (true);

-- Create product_images table
create table product_images (
    id bigint primary key generated by default as identity,
    product_id bigint references products(id) on delete cascade,
    image_url text not null,
    is_main boolean default false,
    sort_order integer default 0,
    created_at timestamptz default now()
);

-- Create indexes for better query performance
create index product_images_product_id_idx on product_images(product_id);
create index product_images_is_main_idx on product_images(is_main);
create index product_images_sort_order_idx on product_images(sort_order);

-- Enable RLS on product_images table
alter table product_images enable row level security;

-- Create policies for product_images table
create policy "Allow public read access to product images"
    on product_images for select
    to public
    using (true);

create policy "Allow authenticated users to modify product images"
    on product_images for all
    to authenticated
    using (true)
    with check (true);

-- Add constraint to ensure only one main image per product
create unique index product_images_main_image_idx 
    on product_images(product_id) 
    where is_main = true;

-- Create stock notifications table
create table stock_notifications (
    id bigint primary key generated by default as identity,
    product_id bigint references products(id) on delete cascade,
    email text not null,
    is_notified boolean default false,
    created_at timestamptz default now()
);

-- Create indexes for better query performance
create index stock_notifications_product_id_idx on stock_notifications(product_id);
create index stock_notifications_email_idx on stock_notifications(email);
create index stock_notifications_is_notified_idx on stock_notifications(is_notified);

-- Enable RLS on stock_notifications table
alter table stock_notifications enable row level security;

-- Create policies for stock_notifications table
create policy "Allow public to create stock notifications"
    on stock_notifications for insert
    to public
    with check (true);

create policy "Allow authenticated users to view and manage stock notifications"
    on stock_notifications for all
    to authenticated
    using (true)
    with check (true);

-- Create unique constraint to prevent duplicate notifications
create unique index stock_notifications_unique_idx 
    on stock_notifications(product_id, email) 
    where is_notified = false;

create table invite_codes (
  id bigint primary key generated always as identity,
  code text not null unique,
  used boolean not null default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  used_at timestamp with time zone
);

-- Enable RLS on invite_codes table
alter table invite_codes enable row level security;

-- Create policies for invite_codes table
create policy "Allow authenticated users to manage invite codes"
    on invite_codes for all
    to authenticated
    using (true)
    with check (true);

-- Create storage bucket for product images
insert into storage.buckets (id, name, public)
values ('images', 'images', true);

-- Create storage policy to allow public access to images
create policy "Public Access"
on storage.objects for select
to public
using ( bucket_id = 'images' );

-- Create storage policy to allow authenticated users to upload images
create policy "Authenticated users can upload images"
on storage.objects for insert
to authenticated
with check ( bucket_id = 'images' );

-- Create storage policy to allow authenticated users to update their images
create policy "Authenticated users can update images"
on storage.objects for update
to authenticated
using ( bucket_id = 'images' );

-- Create storage policy to allow authenticated users to delete their images
create policy "Authenticated users can delete images"
on storage.objects for delete
to authenticated
using ( bucket_id = 'images' );